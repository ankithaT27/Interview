Track the changes that have staged but not committed:
$ git diff --staged

track the changes in the staging area (files that have been changed)
$ git diff 

Git, let us track the changes after committing a file. Suppose we have committed a file for the repository and made some additional changes after the commit. So we can track the file on this stage also.
$ git diff HEAD  

Differences between git fetch and git pull
To understand the differences between fetch and pull, let's know the similarities between both of these commands. Both commands are used to download the data from a remote repository. But both of these commands work differently. Like when you do a git pull, it gets all the changes from the remote or central repository and makes it available to your corresponding branch in your local repository. When you do a git fetch, it fetches all the changes from the remote repository and stores it in a separate branch in your local repository. You can reflect those changes in your corresponding branches by merging.

Fasr forward merge
n this most commonly used merge strategy, history is just one straight line. When you create a branch, make some commits in that branch, the time you’re ready to merge, there is no new merge on the master. That way master’s pointer is just moved straight forward and history is one straight line.

In Recursive merge, after you branch and make some commits, there are some new original commits on the ‘master‘. So, when it’s time to merge, git recurses over the branch and creates a new merge commit. The merge commit continues to have two parents.

Rebase: apply commits of one branch on top of another
dont rebase when there is a public repo and all developers push their work here

$ git rebase -i HEAD~3  

$ git reset --hard (resets the last made chnages like file added to a staging area) It will remove the available changes from the staging are



git reset and git revert are both commands used in Git for managing changes in a repository, but they serve different purposes:

git reset: This command is used to move the HEAD and the current branch to a specific commit. It can be used to reset the staging area to match the most recent commit (git reset --soft HEAD^), reset the staging area and the working directory to match the most recent commit (git reset --mixed HEAD^), or reset the staging area, the working directory, and discard all changes (git reset --hard HEAD^).
--soft: Only moves the HEAD pointer and leaves your changes staged.
--mixed (default): Moves the HEAD pointer and unstages your changes, but leaves them in the working directory.
--hard: Moves the HEAD pointer, unstages your changes, and removes them from the working directory.
